//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(MyBlog.Data.DataContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets0987806ea519ff0d887de99ccb4608e7e30cf1303adeee36e02ed3bc7d8bd267))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets0987806ea519ff0d887de99ccb4608e7e30cf1303adeee36e02ed3bc7d8bd267 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "0987806ea519ff0d887de99ccb4608e7e30cf1303adeee36e02ed3bc7d8bd267"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.ContactMessageEntity")
            {
                return GetView0();
            }

            if (extentName == "DataContext.ContactMessages")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.PostEntity")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.TagEntity")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.PostEntityTagEntity")
            {
                return GetView4();
            }

            if (extentName == "DataContext.Posts")
            {
                return GetView5();
            }

            if (extentName == "DataContext.Tags")
            {
                return GetView6();
            }

            if (extentName == "DataContext.PostEntity_Tags")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.IdentityRole")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserRole")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.UserEntity")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserClaim")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserLogin")
            {
                return GetView12();
            }

            if (extentName == "DataContext.Roles")
            {
                return GetView13();
            }

            if (extentName == "DataContext.IdentityUserRoles")
            {
                return GetView14();
            }

            if (extentName == "DataContext.Users")
            {
                return GetView15();
            }

            if (extentName == "DataContext.IdentityUserClaims")
            {
                return GetView16();
            }

            if (extentName == "DataContext.IdentityUserLogins")
            {
                return GetView17();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ContactMessageEntity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContactMessageEntity
        [CodeFirstDatabaseSchema.ContactMessageEntity](T1.ContactMessageEntity_Id, T1.ContactMessageEntity_IsNew, T1.ContactMessageEntity_CreateDate, T1.ContactMessageEntity_Name, T1.ContactMessageEntity_Email, T1.ContactMessageEntity_Message)
    FROM (
        SELECT 
            T.Id AS ContactMessageEntity_Id, 
            T.IsNew AS ContactMessageEntity_IsNew, 
            T.CreateDate AS ContactMessageEntity_CreateDate, 
            T.Name AS ContactMessageEntity_Name, 
            T.Email AS ContactMessageEntity_Email, 
            T.Message AS ContactMessageEntity_Message, 
            True AS _from0
        FROM DataContext.ContactMessages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataContext.ContactMessages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContactMessages
        [MyBlog.Data.ContactMessageEntity](T1.ContactMessageEntity_Id, T1.ContactMessageEntity_IsNew, T1.ContactMessageEntity_Name, T1.ContactMessageEntity_CreateDate, T1.ContactMessageEntity_Email, T1.ContactMessageEntity_Message)
    FROM (
        SELECT 
            T.Id AS ContactMessageEntity_Id, 
            T.IsNew AS ContactMessageEntity_IsNew, 
            T.Name AS ContactMessageEntity_Name, 
            T.CreateDate AS ContactMessageEntity_CreateDate, 
            T.Email AS ContactMessageEntity_Email, 
            T.Message AS ContactMessageEntity_Message, 
            True AS _from0
        FROM CodeFirstDatabase.ContactMessageEntity AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PostEntity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PostEntity
        [CodeFirstDatabaseSchema.PostEntity](T1.PostEntity_Id, T1.PostEntity_IsEnabled, T1.PostEntity_Title, T1.PostEntity_Slug, T1.PostEntity_CreateDate, T1.PostEntity_UpdateDte, T1.PostEntity_Content)
    FROM (
        SELECT 
            T.Id AS PostEntity_Id, 
            T.IsEnabled AS PostEntity_IsEnabled, 
            T.Title AS PostEntity_Title, 
            T.Slug AS PostEntity_Slug, 
            T.CreateDate AS PostEntity_CreateDate, 
            T.UpdateDte AS PostEntity_UpdateDte, 
            T.Content AS PostEntity_Content, 
            True AS _from0
        FROM DataContext.Posts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TagEntity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TagEntity
        [CodeFirstDatabaseSchema.TagEntity](T1.TagEntity_Id, T1.TagEntity_Name, T1.TagEntity_Slug)
    FROM (
        SELECT 
            T.Id AS TagEntity_Id, 
            T.Name AS TagEntity_Name, 
            T.Slug AS TagEntity_Slug, 
            True AS _from0
        FROM DataContext.Tags AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PostEntityTagEntity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PostEntityTagEntity
        [CodeFirstDatabaseSchema.PostEntityTagEntity](T1.[PostEntityTagEntity.PostEntity_Id], T1.[PostEntityTagEntity.TagEntity_Id])
    FROM (
        SELECT 
            Key(T.PostEntity_Tags_Source).Id AS [PostEntityTagEntity.PostEntity_Id], 
            Key(T.PostEntity_Tags_Target).Id AS [PostEntityTagEntity.TagEntity_Id], 
            True AS _from0
        FROM DataContext.PostEntity_Tags AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataContext.Posts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Posts
        [MyBlog.Data.PostEntity](T1.PostEntity_Id, T1.PostEntity_IsEnabled, T1.PostEntity_Slug, T1.PostEntity_Title, T1.PostEntity_Content, T1.PostEntity_CreateDate, T1.PostEntity_UpdateDte)
    FROM (
        SELECT 
            T.Id AS PostEntity_Id, 
            T.IsEnabled AS PostEntity_IsEnabled, 
            T.Slug AS PostEntity_Slug, 
            T.Title AS PostEntity_Title, 
            T.Content AS PostEntity_Content, 
            T.CreateDate AS PostEntity_CreateDate, 
            T.UpdateDte AS PostEntity_UpdateDte, 
            True AS _from0
        FROM CodeFirstDatabase.PostEntity AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataContext.Tags.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tags
        [MyBlog.Data.TagEntity](T1.TagEntity_Id, T1.TagEntity_Name, T1.TagEntity_Slug)
    FROM (
        SELECT 
            T.Id AS TagEntity_Id, 
            T.Name AS TagEntity_Name, 
            T.Slug AS TagEntity_Slug, 
            True AS _from0
        FROM CodeFirstDatabase.TagEntity AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataContext.PostEntity_Tags.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PostEntity_Tags
        [MyBlog.Data.PostEntity_Tags](T3.[PostEntity_Tags.PostEntity_Tags_Source], T3.[PostEntity_Tags.PostEntity_Tags_Target])
    FROM (
        SELECT -- Constructing PostEntity_Tags_Source
            CreateRef(DataContext.Posts, row(T2.[PostEntity_Tags.PostEntity_Tags_Source.Id]), [MyBlog.Data.PostEntity]) AS [PostEntity_Tags.PostEntity_Tags_Source], 
            T2.[PostEntity_Tags.PostEntity_Tags_Target]
        FROM (
            SELECT -- Constructing PostEntity_Tags_Target
                T1.[PostEntity_Tags.PostEntity_Tags_Source.Id], 
                CreateRef(DataContext.Tags, row(T1.[PostEntity_Tags.PostEntity_Tags_Target.Id]), [MyBlog.Data.TagEntity]) AS [PostEntity_Tags.PostEntity_Tags_Target]
            FROM (
                SELECT 
                    T.PostEntity_Id AS [PostEntity_Tags.PostEntity_Tags_Source.Id], 
                    T.TagEntity_Id AS [PostEntity_Tags.PostEntity_Tags_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.PostEntityTagEntity AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityRole
        [CodeFirstDatabaseSchema.IdentityRole](T2.IdentityRole_Id, T2.IdentityRole_Name, T2.IdentityRole_Description, T2.IdentityRole_Discriminator)
    FROM (
        SELECT -- Constructing Discriminator
            T1.IdentityRole_Id, 
            T1.IdentityRole_Name, 
            T1.IdentityRole_Description, 
            CASE
                WHEN T1._from0 THEN N'RoleEntity'
                ELSE N'IdentityRole'
            END AS IdentityRole_Discriminator
        FROM (
            SELECT 
                T.Id AS IdentityRole_Id, 
                T.Name AS IdentityRole_Name, 
                TREAT(T AS [MyBlog.Data.RoleEntity]).Description AS IdentityRole_Description, 
                CASE WHEN T IS OF (ONLY [MyBlog.Data.RoleEntity]) THEN True ELSE False END AS _from0, 
                True AS _from1, 
                CASE WHEN T IS OF (ONLY [MyBlog.Data.IdentityRole]) THEN True ELSE False END AS _from2
            FROM DataContext.Roles AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRole
        [CodeFirstDatabaseSchema.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0
        FROM DataContext.IdentityUserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserEntity.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserEntity
        [CodeFirstDatabaseSchema.UserEntity](T1.UserEntity_Id, T1.UserEntity_Email, T1.UserEntity_EmailConfirmed, T1.UserEntity_PasswordHash, T1.UserEntity_SecurityStamp, T1.UserEntity_PhoneNumber, T1.UserEntity_PhoneNumberConfirmed, T1.UserEntity_TwoFactorEnabled, T1.UserEntity_LockoutEndDateUtc, T1.UserEntity_LockoutEnabled, T1.UserEntity_AccessFailedCount, T1.UserEntity_UserName)
    FROM (
        SELECT 
            T.Id AS UserEntity_Id, 
            T.Email AS UserEntity_Email, 
            T.EmailConfirmed AS UserEntity_EmailConfirmed, 
            T.PasswordHash AS UserEntity_PasswordHash, 
            T.SecurityStamp AS UserEntity_SecurityStamp, 
            T.PhoneNumber AS UserEntity_PhoneNumber, 
            T.PhoneNumberConfirmed AS UserEntity_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS UserEntity_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS UserEntity_LockoutEndDateUtc, 
            T.LockoutEnabled AS UserEntity_LockoutEnabled, 
            T.AccessFailedCount AS UserEntity_AccessFailedCount, 
            T.UserName AS UserEntity_UserName, 
            True AS _from0
        FROM DataContext.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserClaim.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaim
        [CodeFirstDatabaseSchema.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.UserId AS IdentityUserClaim_UserId, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0
        FROM DataContext.IdentityUserClaims AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserLogin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogin
        [CodeFirstDatabaseSchema.IdentityUserLogin](T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T1.IdentityUserLogin_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            T.UserId AS IdentityUserLogin_UserId, 
            True AS _from0
        FROM DataContext.IdentityUserLogins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataContext.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        CASE
            WHEN T1._from2 THEN [MyBlog.Data.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
            ELSE [MyBlog.Data.RoleEntity](T1.IdentityRole_Id, T1.IdentityRole_Name, T1.RoleEntity_Description)
        END
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            T.Description AS RoleEntity_Description, 
            True AS _from0, 
            CASE WHEN T.Discriminator = N'RoleEntity' THEN True ELSE False END AS _from1, 
            CASE WHEN T.Discriminator = N'IdentityRole' THEN True ELSE False END AS _from2
        FROM CodeFirstDatabase.IdentityRole AS T
        WHERE T.Discriminator IN {N'RoleEntity', N'IdentityRole'}
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataContext.IdentityUserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRoles
        [MyBlog.Data.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataContext.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [MyBlog.Data.UserEntity](T1.UserEntity_Id, T1.UserEntity_Email, T1.UserEntity_EmailConfirmed, T1.UserEntity_PasswordHash, T1.UserEntity_SecurityStamp, T1.UserEntity_PhoneNumber, T1.UserEntity_PhoneNumberConfirmed, T1.UserEntity_TwoFactorEnabled, T1.UserEntity_LockoutEndDateUtc, T1.UserEntity_LockoutEnabled, T1.UserEntity_AccessFailedCount, T1.UserEntity_UserName)
    FROM (
        SELECT 
            T.Id AS UserEntity_Id, 
            T.Email AS UserEntity_Email, 
            T.EmailConfirmed AS UserEntity_EmailConfirmed, 
            T.PasswordHash AS UserEntity_PasswordHash, 
            T.SecurityStamp AS UserEntity_SecurityStamp, 
            T.PhoneNumber AS UserEntity_PhoneNumber, 
            T.PhoneNumberConfirmed AS UserEntity_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS UserEntity_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS UserEntity_LockoutEndDateUtc, 
            T.LockoutEnabled AS UserEntity_LockoutEnabled, 
            T.AccessFailedCount AS UserEntity_AccessFailedCount, 
            T.UserName AS UserEntity_UserName, 
            True AS _from0
        FROM CodeFirstDatabase.UserEntity AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataContext.IdentityUserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaims
        [MyBlog.Data.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_UserId, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.UserId AS IdentityUserClaim_UserId, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserClaim AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataContext.IdentityUserLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogins
        [MyBlog.Data.IdentityUserLogin](T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey, T1.IdentityUserLogin_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            T.UserId AS IdentityUserLogin_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserLogin AS T
    ) AS T1");
        }
    }
}
